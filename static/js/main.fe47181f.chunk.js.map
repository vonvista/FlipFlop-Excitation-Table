{"version":3,"sources":["TruthTableBlock.js","TruthTableRow.js","TruthTableRowTypeB.js","Labels.js","App.js","reportWebVitals.js","index.js"],"names":["TruthTableBlock","props","onClick","className","value","TruthTableRow","useState","bitsState","numInputs","inputs","slice","truthTableNums","truthTableInputs","Array","fill","inputFunctions","from","keys","listTest","truthTable","React","updateState","forceUpdate","useCallback","handleClick","i","flipflopType","map","element","index","TruthTableRowTypeB","Math","floor","constructor","setConstructor","Labels","name","App","setbitsState","setNumInputs","setFlipflopType","labels","setLabels","setInputs","convertToBinary","dec","toString","length","split","makeLabels","alphabetArray","labelAppend","push","renderLabels","setRenderLabels","document","title","pow","alert","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"iOAWeA,MATf,SAAyBC,GAEvB,OACE,8BACE,wBAAQC,QAAWD,EAAMC,QAASC,UAAaF,EAAME,UAArD,SAAiEF,EAAMG,WCsJ9DC,MAzJf,SAAuBJ,GAAO,IAAD,EAEOK,mBAASL,EAAMM,WAFtB,mBAEpBA,EAFoB,aAGOD,mBAASL,EAAMO,YAHtB,mBAGpBA,EAHoB,aAKSF,mBAASL,EAAMQ,OAAOC,MAAM,EAAET,EAAMM,aAL7C,mBAKpBI,EALoB,aAOaL,mBAASL,EAAMQ,OAAOC,MAAMT,EAAMM,UAAUN,EAAMM,UAAYN,EAAMO,aAPjF,mBAOpBI,EAPoB,aASiBN,mBAASO,MAAMN,GAAWO,KAAK,OAThD,mBASpBC,EAToB,aAWCT,mBAASO,MAAMG,KAAKH,MAAMN,GAAWU,UAXtC,mBAWpBC,EAXoB,aAaSZ,mBAASO,MAAMN,EAAYC,GAAWM,KAAK,OAbpD,mBAapBK,EAboB,aAeHC,IAAMd,YAArBe,EAfkB,oBAgBrBC,EAAcF,IAAMG,aAAY,kBAAMF,EAAY,MAAK,IAhBlC,EAkBmBf,oBAAS,GAlB5B,mBAqBrBkB,GArBqB,UAqBP,SAACC,GACC,GAAjBN,EAAWM,GACZN,EAAWM,GAAK,EAEO,GAAjBN,EAAWM,GACjBN,EAAWM,GAAK,IAEO,KAAjBN,EAAWM,KACjBN,EAAWM,GAAK,GAMO,MAAtBxB,EAAMyB,aACiB,GAArBf,EAAec,IAA4B,GAAjBN,EAAWM,GACtCV,EAAeU,GAAK,MAEO,GAArBd,EAAec,IAA4B,GAAjBN,EAAWM,GAC3CV,EAAeU,GAAK,MAEO,GAArBd,EAAec,IAA4B,GAAjBN,EAAWM,GAC3CV,EAAeU,GAAK,MAEO,GAArBd,EAAec,IAA4B,GAAjBN,EAAWM,GAC3CV,EAAeU,GAAK,MAGpBV,EAAeU,GAAK,IAIM,MAAtBxB,EAAMyB,aACY,GAArBf,EAAec,IAA4B,GAAjBN,EAAWM,GACtCV,EAAeU,GAAK,MAEO,GAArBd,EAAec,IAA4B,GAAjBN,EAAWM,GAC3CV,EAAeU,GAAK,MAEO,GAArBd,EAAec,IAA4B,GAAjBN,EAAWM,GAC3CV,EAAeU,GAAK,MAEO,GAArBd,EAAec,IAA4B,GAAjBN,EAAWM,GAC3CV,EAAeU,GAAK,MAGpBV,EAAeU,GAAK,IAKM,KAAtBxB,EAAMyB,aACY,GAArBf,EAAec,IAA4B,GAAjBN,EAAWM,GACtCV,EAAeU,GAAK,IAEO,GAArBd,EAAec,IAA4B,GAAjBN,EAAWM,GAC3CV,EAAeU,GAAK,IAEO,GAArBd,EAAec,IAA4B,GAAjBN,EAAWM,GAC3CV,EAAeU,GAAK,IAEO,GAArBd,EAAec,IAA4B,GAAjBN,EAAWM,GAC3CV,EAAeU,GAAK,IAGpBV,EAAeU,GAAK,IAKM,KAAtBxB,EAAMyB,eACY,GAArBf,EAAec,IAA4B,GAAjBN,EAAWM,GACtCV,EAAeU,GAAK,IAEO,GAArBd,EAAec,IAA4B,GAAjBN,EAAWM,IAGhB,GAArBd,EAAec,IAA4B,GAAjBN,EAAWM,GAF3CV,EAAeU,GAAK,IAKO,GAArBd,EAAec,IAA4B,GAAjBN,EAAWM,GAC3CV,EAAeU,GAAK,IAGpBV,EAAeU,GAAK,KAGxBH,MAkBF,OACE,qBAAKnB,UAAY,MAAjB,SAEE,sBAAKA,UAAY,MAAjB,UACGQ,EAAegB,KAAI,SAACC,EAASC,GAAV,OAClB,cAAC,EAAD,CAAiBzB,MAASwB,EAAS1B,QAAW,KAAMC,UAAY,kBAAsB0B,MAGvFjB,EAAiBe,KAAI,SAACC,EAASC,GAAV,OACpB,cAAC,EAAD,CAAiBzB,MAASwB,EAAS1B,QAAW,KAAMC,UAAY,kBAAsB0B,MAGvFX,EAASS,KAAI,SAACC,EAASC,GAAV,OACZ,cAAC,EAAD,CAAiBzB,MAASe,EAAWS,GAAU1B,QAAW,kBAAMsB,EAAYI,IAChEzB,UAAY,UAAnB0B,MAGNd,EAAeY,KAAI,SAACC,EAASC,GAAV,OAClB,cAAC,EAAD,CAAiBzB,MAASwB,EAAS1B,QAAW,KAAMC,UAAY,4BAAgC0B,YCqC3FC,MArLf,SAA4B7B,GAAO,IAAD,EAEEK,mBAASL,EAAMM,WAFjB,mBAEzBA,EAFyB,aAGED,mBAASL,EAAMO,YAHjB,gCAKIF,mBAASL,EAAMQ,OAAOC,MAAM,EAAET,EAAMM,aALxC,mBAKzBI,EALyB,aAOQL,mBAASL,EAAMQ,OAAOC,MAAMT,EAAMM,UAAUN,EAAMM,UAAYN,EAAMO,aAP5E,mBAOzBI,EAPyB,aASYN,mBAASO,MAAMN,GAAWO,KAAK,OAT3C,mBASzBC,EATyB,aAWJT,mBAASO,MAAMG,KAAKH,MAAkB,EAAZN,GAAeU,UAXrC,mBAWzBC,EAXyB,aAaIZ,mBAASO,MAAkB,EAAZN,GAAeO,KAAK,OAbvC,mBAazBK,EAbyB,aAeRC,IAAMd,YAArBe,EAfuB,oBAgB1BC,EAAcF,IAAMG,aAAY,kBAAMF,EAAY,MAAK,IAhB7B,EAkBcf,oBAAS,GAlBvB,mBAqB1BkB,GArB0B,UAqBZ,SAACC,GAEC,GAAjBN,EAAWM,GACZN,EAAWM,GAAK,GAEO,GAAjBN,EAAWM,IAGM,KAAjBN,EAAWM,MAFjBN,EAAWM,GAAK,GAMlB,IAAII,EAAQE,KAAKC,MAAMP,EAAE,GAMzB,GAAyB,MAAtBxB,EAAMyB,aACP,IAAI,IAAID,EAAI,EAAGA,EAAgB,EAAZlB,EAAekB,GAAQ,EACxCI,EAAQE,KAAKC,MAAMP,EAAE,GACD,GAAjBN,EAAWM,IAA8B,GAAnBN,EAAWM,EAAE,GACR,GAAzBd,EAAekB,GAChBd,EAAec,GAAS,EAGxBd,EAAec,GAAS,EAGH,GAAjBV,EAAWM,IAA8B,GAAnBN,EAAWM,EAAE,GACzCV,EAAec,GAAS,EAED,GAAjBV,EAAWM,IAA8B,GAAnBN,EAAWM,EAAE,GACzCV,EAAec,GAAS,EAED,GAAjBV,EAAWM,IAA8B,GAAnBN,EAAWM,EAAE,KACb,GAAzBd,EAAekB,GAChBd,EAAec,GAAS,EAGxBd,EAAec,GAAS,QAM3B,GAAyB,MAAtB5B,EAAMyB,aACZ,IAAI,IAAID,EAAI,EAAGA,EAAgB,EAAZlB,EAAekB,GAAQ,EACxCI,EAAQE,KAAKC,MAAMP,EAAE,GACD,GAAjBN,EAAWM,IAA8B,GAAnBN,EAAWM,EAAE,GACR,GAAzBd,EAAekB,GAChBd,EAAec,GAAS,EAGxBd,EAAec,GAAS,EAGH,GAAjBV,EAAWM,IAA8B,GAAnBN,EAAWM,EAAE,GACzCV,EAAec,GAAS,EAED,GAAjBV,EAAWM,IAA8B,GAAnBN,EAAWM,EAAE,GACzCV,EAAec,GAAS,EAED,GAAjBV,EAAWM,IAA8B,GAAnBN,EAAWM,EAAE,KACzCV,EAAec,GAAS,UAMzB,GAAyB,KAAtB5B,EAAMyB,aACZ,IAAI,IAAID,EAAI,EAAGA,EAAgB,EAAZlB,EAAekB,GAAQ,EACxCI,EAAQE,KAAKC,MAAMP,EAAE,GACD,GAAjBN,EAAWM,GACZV,EAAec,GAAS,EAED,GAAjBV,EAAWM,KACjBV,EAAec,GAAS,QAKzB,GAAyB,KAAtB5B,EAAMyB,aACZ,IAAI,IAAID,EAAI,EAAGA,EAAgB,EAAZlB,EAAekB,GAAQ,EACxCI,EAAQE,KAAKC,MAAMP,EAAE,GACD,GAAjBN,EAAWM,GACgB,GAAzBd,EAAekB,GAChBd,EAAec,GAAS,EAEO,GAAzBlB,EAAekB,KACrBd,EAAec,GAAS,GAGH,GAAjBV,EAAWM,KACW,GAAzBd,EAAekB,GAChBd,EAAec,GAAS,EAEO,GAAzBlB,EAAekB,KACrBd,EAAec,GAAS,IAMhCP,MA7H8B,EA8IMhB,oBAAS,GA9If,mBA8IzB2B,EA9IyB,KA8IZC,EA9IY,KA+IhC,IAAmB,IAAhBD,EAAsB,CACvB,GAAyB,KAAtBhC,EAAMyB,cAA6C,KAAtBzB,EAAMyB,aACpC,IAAI,IAAID,EAAI,EAAGA,EAAgB,EAAZlB,EAAekB,GAAQ,EACxCN,EAAWM,GAAK,IAGpBS,GAAe,GAIjB,OAEE,qBAAK/B,UAAY,MAAjB,SAEE,sBAAKA,UAAY,MAAjB,UACGQ,EAAegB,KAAI,SAACC,EAASC,GAAV,OAClB,cAAC,EAAD,CAAiBzB,MAASwB,EAAS1B,QAAW,KAAMC,UAAY,kBAAsB0B,MAGvFjB,EAAiBe,KAAI,SAACC,EAASC,GAAV,OACpB,cAAC,EAAD,CAAiBzB,MAASwB,EAAS1B,QAAW,KAAMC,UAAY,kBAAsB0B,MAGvFd,EAAeY,KAAI,SAACC,EAASC,GAAV,OAClB,cAAC,EAAD,CAAiBzB,MAASwB,EAAS1B,QAAW,KAAMC,UAAY,8BAAkC0B,MAGnGX,EAASS,KAAI,SAACC,EAASC,GAAV,OACZ,cAAC,EAAD,CAAiBzB,MAASe,EAAWS,GAAU1B,QAAW,kBAAMsB,EAAYI,IAC9DzB,UAAY,UAAnB0B,YCrKFM,MARf,SAAgBlC,GACd,OACE,8BACE,wBAAQE,UAAY,SAApB,SAA8BF,EAAMmC,UCqL3BC,MAnLf,WAAgB,IAAD,EACqB/B,mBAAS,GAD9B,mBACNC,EADM,KACK+B,EADL,OAEqBhC,mBAAS,GAF9B,mBAENE,EAFM,KAEK+B,EAFL,OAI2BjC,mBAAS,MAJpC,mBAINoB,EAJM,KAIQc,EAJR,OAMelC,mBAAS,IANxB,mBAMNmC,EANM,KAMEC,EANF,OAQepC,mBAAS,IARxB,mBAQNG,EARM,KAQEkC,EARF,OAUWvB,IAAMd,WAArBe,EAVI,oBA4BPuB,GAjBcxB,IAAMG,aAAY,kBAAMF,EAAY,MAAK,IAiBrC,SAACwB,GAGvB,IAFAA,EAAMA,EAAIC,SAAS,GAEbD,EAAIE,OAASxC,EAAYC,GAC7BqC,EAAM,EAAIA,EAEZ,OAAOA,EAAIC,SAAS,GAAGE,MAAM,MAoBzBC,EAAa,WAGjB,IAFA,IAAMC,EAAgB,6BAA6BF,MAAM,IACrDG,EAAc,GACV1B,EAAI,EAAGA,EAAIlB,EAAWkB,IAC5B0B,EAAYC,KAAKF,EAAczB,IAGjC,IAAI,IAAIA,EAAI,EAAGA,EAAIjB,EAAWiB,IAC5B0B,EAAYC,KAAK,SAGnB,IAAI,IAAI3B,EAAI,EAAGA,EAAIlB,EAAWkB,IAC5B0B,EAAYC,KAAKF,EAAczB,IAGjC,GAAmB,MAAhBC,EACD,IAAI,IAAID,EAAI,EAAGA,EAAIlB,EAAWkB,IAC5B0B,EAAYC,KAAK,IAAMF,EAAczB,IACrC0B,EAAYC,KAAK,IAAMF,EAAczB,SAGpC,GAAmB,MAAhBC,EACN,IAAI,IAAID,EAAI,EAAGA,EAAIlB,EAAWkB,IAC5B0B,EAAYC,KAAK,IAAMF,EAAczB,IACrC0B,EAAYC,KAAK,IAAMF,EAAczB,SAGpC,GAAmB,KAAhBC,EACN,IAAI,IAAID,EAAI,EAAGA,EAAIlB,EAAWkB,IAC5B0B,EAAYC,KAAK,KACjBD,EAAYC,KAAKF,EAAczB,SAG9B,GAAmB,KAAhBC,EACN,IAAI,IAAID,EAAI,EAAGA,EAAIlB,EAAWkB,IAC5B0B,EAAYC,KAAK,KACjBD,EAAYC,KAAKF,EAAczB,IAInCiB,EAAUS,IA9FC,EAiG2B7C,oBAAS,GAjGpC,mBAiGN+C,EAjGM,KAiGQC,EAjGR,KAwGb,OANoB,IAAjBD,GAEDC,GAAgB,GAKhBC,SAASC,MAAQ,WACjB,sBAAKrD,UAAY,OAAjB,UAEE,qBAAKA,UAAY,cAAjB,SACE,wEAGF,sBAAKA,UAAY,gBAAjB,UAEE,sBAAKA,UAAY,SAAjB,UACE,0CAEA,wBAAQD,QAAW,kBAAMoC,EAAa/B,EAAY,IAAIJ,UAAY,iBAAlE,eACA,mCAAMI,EAAN,OACA,wBAAQL,QAAW,kBAAMoC,EAAa/B,EAAY,IAAIJ,UAAY,iBAAlE,kBAGF,sBAAKA,UAAY,SAAjB,UACE,4CAEA,wBAAQD,QAAW,kBAAMqC,EAAa/B,EAAY,IAAIL,UAAY,iBAAlE,eACA,mCAAMK,EAAN,OACA,wBAAQN,QAAW,kBAAMqC,EAAa/B,EAAY,IAAIL,UAAY,iBAAlE,kBAGF,sBAAKA,UAAY,SAAjB,UACE,gDACA,wBAAQD,QAvHW,WACN,MAAhBwB,EACDc,EAAgB,MAEM,MAAhBd,EACNc,EAAgB,KAEM,KAAhBd,EACNc,EAAgB,KAEM,KAAhBd,GACNc,EAAgB,OA4G2BrC,UAAY,gBAAnD,SAAoEuB,UAKxE,sBAAKvB,UAAY,kBAAjB,UACE,wBAAQD,QApGO,WACE,IAAlBO,EAAOsC,QACRE,IACAN,EAAU9B,MAAMG,KAAKH,MAAMkB,KAAK0B,IAAI,EAAElD,EAAYC,IAAYS,UAG9DyC,MAAM,gDA8F6BvD,UAAY,iBAA7C,4BACA,wBAAQD,QA5FK,WACI,IAAlBO,EAAOsC,SACRJ,EAAU,IACVD,EAAU,MAyFuBvC,UAAY,iBAA3C,4BAGF,sBAAKA,UAAY,aAAjB,UAEsB,IAAlBM,EAAOsC,QAAgB,qEAGzB,qBAAK5C,UAAY,MAAjB,SACGsC,EAAOd,KAAI,SAACC,EAAQC,GAAT,OACV,cAAC,EAAD,CAAQO,KAAQR,GAAcC,QAGjCpB,EAAOkB,KAAI,SAACC,EAAQC,GAAT,OACV,cAAC,EAAD,CAAepB,OAAUmC,EAAgBhB,GAAUrB,UAAaA,EAChEC,UAAaA,EAAWkB,aAAgBA,GAAmBG,MAG7D,uBAGoB,IAAlBpB,EAAOsC,QAAgB,uEAIzB,qBAAK5C,UAAY,MAAjB,SACGsC,EAAOd,KAAI,SAACC,EAAQC,GAAT,OACV,cAAC,EAAD,CAAQO,KAAQR,GAAcC,QAGjCpB,EAAOkB,KAAI,SAACC,EAAQC,GAAT,OACV,cAAC,EAAD,CAAoBpB,OAAUmC,EAAgBhB,GAAUrB,UAAaA,EACrEC,UAAaA,EAAWkB,aAAgBA,GAAmBG,aCtKtD8B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFf,SAASgB,eAAe,SAO1BZ,M","file":"static/js/main.fe47181f.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction TruthTableBlock(props){\r\n\r\n  return(\r\n    <div>\r\n      <button onClick = {props.onClick} className = {props.className}>{props.value}</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TruthTableBlock;","import React, { useState } from \"react\";\r\nimport TruthTableBlock from \"./TruthTableBlock\";\r\n\r\nfunction TruthTableRow(props){\r\n\r\n  const [bitsState, setbitsState] = useState(props.bitsState);\r\n  const [numInputs, setNumInputs] = useState(props.numInputs);\r\n\r\n  const [truthTableNums, setTTNums] = useState(props.inputs.slice(0,props.bitsState));\r\n\r\n  const [truthTableInputs, setTTInputs] = useState(props.inputs.slice(props.bitsState,props.bitsState + props.numInputs));\r\n\r\n  const [inputFunctions, setInputFunctions] = useState(Array(bitsState).fill(\"x\"));\r\n\r\n  const [listTest, setList] = useState(Array.from(Array(bitsState).keys()));\r\n\r\n  const [truthTable, setTruthTable] = useState(Array(bitsState + numInputs).fill(\"x\"));\r\n\r\n  const [, updateState] = React.useState();\r\n  const forceUpdate = React.useCallback(() => updateState({}), []);\r\n\r\n  const [renderedButtons, setRenderedButtons] = useState(false);\r\n\r\n\r\n  const handleClick = (i) => {\r\n    if(truthTable[i] == 0){\r\n      truthTable[i] = 1;\r\n    }\r\n    else if(truthTable[i] == 1){\r\n      truthTable[i] = \"x\";\r\n    }\r\n    else if(truthTable[i] == \"x\"){\r\n      truthTable[i] = 0;\r\n    }\r\n\r\n    //FLIP FLOP TYPE DETECT\r\n\r\n    //FOR JK FLIP FLOP\r\n    if(props.flipflopType == \"JK\"){\r\n      if(truthTableNums[i] == 0 && truthTable[i] == 0){\r\n        inputFunctions[i] = \"0 x\";\r\n      }\r\n      else if(truthTableNums[i] == 0 && truthTable[i] == 1){\r\n        inputFunctions[i] = \"1 x\";\r\n      }\r\n      else if(truthTableNums[i] == 1 && truthTable[i] == 0){\r\n        inputFunctions[i] = \"x 1\";\r\n      }\r\n      else if(truthTableNums[i] == 1 && truthTable[i] == 1){\r\n        inputFunctions[i] = \"x 0\";\r\n      }\r\n      else{\r\n        inputFunctions[i] = \"x\";\r\n      }\r\n    }\r\n    //FOR SR FLIP FLOP\r\n    else if(props.flipflopType == \"SR\"){\r\n      if(truthTableNums[i] == 0 && truthTable[i] == 0){\r\n        inputFunctions[i] = \"0 x\";\r\n      }\r\n      else if(truthTableNums[i] == 0 && truthTable[i] == 1){\r\n        inputFunctions[i] = \"1 0\";\r\n      }\r\n      else if(truthTableNums[i] == 1 && truthTable[i] == 0){\r\n        inputFunctions[i] = \"0 1\";\r\n      }\r\n      else if(truthTableNums[i] == 1 && truthTable[i] == 1){\r\n        inputFunctions[i] = \"x 0\";\r\n      }\r\n      else{\r\n        inputFunctions[i] = \"x\";\r\n      }\r\n    }\r\n\r\n    //FOR D FLIP FLOP\r\n    else if(props.flipflopType == \"D\"){\r\n      if(truthTableNums[i] == 0 && truthTable[i] == 0){\r\n        inputFunctions[i] = \"0\";\r\n      }\r\n      else if(truthTableNums[i] == 0 && truthTable[i] == 1){\r\n        inputFunctions[i] = \"1\";\r\n      }\r\n      else if(truthTableNums[i] == 1 && truthTable[i] == 0){\r\n        inputFunctions[i] = \"0\";\r\n      }\r\n      else if(truthTableNums[i] == 1 && truthTable[i] == 1){\r\n        inputFunctions[i] = \"1\";\r\n      }\r\n      else{\r\n        inputFunctions[i] = \"x\";\r\n      }\r\n    }\r\n\r\n    //FOR T FLIP FLOP\r\n    else if(props.flipflopType == \"T\"){\r\n      if(truthTableNums[i] == 0 && truthTable[i] == 0){\r\n        inputFunctions[i] = \"0\";\r\n      }\r\n      else if(truthTableNums[i] == 0 && truthTable[i] == 1){\r\n        inputFunctions[i] = \"1\";\r\n      }\r\n      else if(truthTableNums[i] == 1 && truthTable[i] == 0){\r\n        inputFunctions[i] = \"1\";\r\n      }\r\n      else if(truthTableNums[i] == 1 && truthTable[i] == 1){\r\n        inputFunctions[i] = \"0\";\r\n      }\r\n      else{\r\n        inputFunctions[i] = \"x\";\r\n      }\r\n    }\r\n    forceUpdate();\r\n  }\r\n\r\n  const addItem = (index) => {\r\n    setList([ ...listTest, {\r\n      key: listTest.length,\r\n      value: \"x\",\r\n      onClick: () => handleClick(listTest.length)\r\n    }])\r\n  }\r\n\r\n  const createButtons = () => {\r\n    for(let i = 0; i < 3; i++){\r\n      addItem(listTest.length);\r\n    }\r\n  }\r\n\r\n\r\n  return(\r\n    <div className = \"app\">\r\n      \r\n      <div className = \"row\">\r\n        {truthTableNums.map((element, index) => (\r\n          <TruthTableBlock value = {element} onClick = {null} className = \"truthTablenums\" key={index}/>\r\n        ))}\r\n\r\n        {truthTableInputs.map((element, index) => (\r\n          <TruthTableBlock value = {element} onClick = {null} className = \"truthTablenums\" key={index}/>\r\n        ))}\r\n\r\n        {listTest.map((element, index) => (\r\n          <TruthTableBlock value = {truthTable[element]} onClick = {() => handleClick(element)} \r\n          key={index} className = \"button\"/>     \r\n        ))}\r\n\r\n        {inputFunctions.map((element, index) => (\r\n          <TruthTableBlock value = {element} onClick = {null} className = \"truthTableInputFunctions\" key={index}/>\r\n        ))}\r\n        \r\n      </div>\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nexport default TruthTableRow;","import React, { useState } from \"react\";\r\nimport TruthTableBlock from \"./TruthTableBlock\";\r\n\r\nfunction TruthTableRowTypeB(props){\r\n\r\n  const [bitsState, setbitsState] = useState(props.bitsState);\r\n  const [numInputs, setNumInputs] = useState(props.numInputs);\r\n\r\n  const [truthTableNums, setTTNums] = useState(props.inputs.slice(0,props.bitsState));\r\n\r\n  const [truthTableInputs, setTTInputs] = useState(props.inputs.slice(props.bitsState,props.bitsState + props.numInputs));\r\n\r\n  const [inputFunctions, setInputFunctions] = useState(Array(bitsState).fill(\"x\"));\r\n\r\n  const [listTest, setList] = useState(Array.from(Array(bitsState * 2).keys()));\r\n\r\n  const [truthTable, setTruthTable] = useState(Array(bitsState * 2).fill(\"x\"));\r\n\r\n  const [, updateState] = React.useState();\r\n  const forceUpdate = React.useCallback(() => updateState({}), []);\r\n\r\n  const [renderedButtons, setRenderedButtons] = useState(false);\r\n\r\n\r\n  const handleClick = (i) => {\r\n\r\n    if(truthTable[i] == 0){\r\n      truthTable[i] = 1;\r\n    }\r\n    else if(truthTable[i] == 1){\r\n      truthTable[i] = 0;\r\n    }\r\n    else if(truthTable[i] == \"x\"){\r\n      truthTable[i] = 0;\r\n    }\r\n\r\n    var index = Math.floor(i/2);\r\n\r\n\r\n    //FLIP FLOP TYPE DETECT\r\n\r\n    //FOR JK FLIP FLOP\r\n    if(props.flipflopType == \"JK\"){\r\n      for(let i = 0; i < bitsState * 2; i = i + 2){\r\n        index = Math.floor(i/2);\r\n        if(truthTable[i] == 0 && truthTable[i+1] == 0){\r\n          if(truthTableNums[index] == 0){\r\n            inputFunctions[index] = 0;\r\n          }\r\n          else{\r\n            inputFunctions[index] = 1;\r\n          }      \r\n        }\r\n        else if(truthTable[i] == 0 && truthTable[i+1] == 1){\r\n          inputFunctions[index] = 0;\r\n        }\r\n        else if(truthTable[i] == 1 && truthTable[i+1] == 0){\r\n          inputFunctions[index] = 1;\r\n        }\r\n        else if(truthTable[i] == 1 && truthTable[i+1] == 1){\r\n          if(truthTableNums[index] == 0){\r\n            inputFunctions[index] = 1;\r\n          }\r\n          else{\r\n            inputFunctions[index] = 0;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    //FOR SR FLIP FLOP\r\n    else if(props.flipflopType == \"SR\"){\r\n      for(let i = 0; i < bitsState * 2; i = i + 2){\r\n        index = Math.floor(i/2);\r\n        if(truthTable[i] == 0 && truthTable[i+1] == 0){\r\n          if(truthTableNums[index] == 0){\r\n            inputFunctions[index] = 0;\r\n          }\r\n          else{\r\n            inputFunctions[index] = 1;\r\n          }      \r\n        }\r\n        else if(truthTable[i] == 0 && truthTable[i+1] == 1){\r\n          inputFunctions[index] = 0;\r\n        }\r\n        else if(truthTable[i] == 1 && truthTable[i+1] == 0){\r\n          inputFunctions[index] = 1;\r\n        }\r\n        else if(truthTable[i] == 1 && truthTable[i+1] == 1){\r\n          inputFunctions[index] = \"?\";\r\n        }\r\n      }\r\n    }\r\n\r\n    //FOR D FLIP FLOP\r\n    else if(props.flipflopType == \"D\"){\r\n      for(let i = 0; i < bitsState * 2; i = i + 2){\r\n        index = Math.floor(i/2);\r\n        if(truthTable[i] == 0){\r\n          inputFunctions[index] = 0;\r\n        }\r\n        else if(truthTable[i] == 1){\r\n          inputFunctions[index] = 1;\r\n        }\r\n      }\r\n    }\r\n    //FOR T FLIP FLOP\r\n    else if(props.flipflopType == \"T\"){\r\n      for(let i = 0; i < bitsState * 2; i = i + 2){\r\n        index = Math.floor(i/2);\r\n        if(truthTable[i] == 1){\r\n          if(truthTableNums[index] == 0){\r\n            inputFunctions[index] = 1;\r\n          }\r\n          else if(truthTableNums[index] == 1){\r\n            inputFunctions[index] = 0;\r\n          }      \r\n        }\r\n        else if(truthTable[i] == 0){\r\n          if(truthTableNums[index] == 0){\r\n            inputFunctions[index] = 0;\r\n          }\r\n          else if(truthTableNums[index] == 1){\r\n            inputFunctions[index] = 1;\r\n          }      \r\n        }\r\n      }\r\n    }\r\n\r\n    forceUpdate();\r\n  }\r\n\r\n  const addItem = (index) => {\r\n    setList([ ...listTest, {\r\n      key: listTest.length,\r\n      value: \"x\",\r\n      onClick: () => handleClick(listTest.length)\r\n    }])\r\n  }\r\n\r\n  const createButtons = () => {\r\n    for(let i = 0; i < 3; i++){\r\n      addItem(listTest.length);\r\n    }\r\n  }\r\n\r\n  const [constructor, setConstructor] = useState(false);\r\n  if(constructor === false){\r\n    if(props.flipflopType == \"D\" || props.flipflopType == \"T\"){\r\n      for(let i = 1; i < bitsState * 2; i = i + 2){\r\n        truthTable[i] = \"-\";\r\n      }\r\n    }\r\n    setConstructor(true);\r\n  }\r\n\r\n\r\n  return(\r\n\r\n    <div className = \"app\">\r\n      \r\n      <div className = \"row\">\r\n        {truthTableNums.map((element, index) => (\r\n          <TruthTableBlock value = {element} onClick = {null} className = \"truthTablenums\" key={index}/>\r\n        ))}\r\n\r\n        {truthTableInputs.map((element, index) => (\r\n          <TruthTableBlock value = {element} onClick = {null} className = \"truthTablenums\" key={index}/>\r\n        ))}\r\n\r\n        {inputFunctions.map((element, index) => (\r\n          <TruthTableBlock value = {element} onClick = {null} className = \"truthTablePresentFunctions\" key={index}/>\r\n        ))}\r\n\r\n        {listTest.map((element, index) => (\r\n          <TruthTableBlock value = {truthTable[element]} onClick = {() => handleClick(element)} \r\n          key = {index} className = \"button\"/>     \r\n        ))}\r\n        \r\n      </div>\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nexport default TruthTableRowTypeB;","import React from \"react\";\r\n\r\nfunction Labels(props){\r\n  return(\r\n    <div>\r\n      <button className = \"labels\">{props.name}</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Labels;","import React, { useState } from \"react\";\r\nimport \"./App.css\";\r\nimport TruthTableRow from \"./TruthTableRow\";\r\nimport TruthTableRowTypeB from \"./TruthTableRowTypeB\";\r\nimport Labels from \"./Labels\";\r\n//import TruthTableButton from \"./ButtonTruthTable\";\r\n\r\nfunction App (){\r\n  const [bitsState, setbitsState] = useState(3);\r\n  const [numInputs, setNumInputs] = useState(1);\r\n\r\n  const [flipflopType, setFlipflopType] = useState(\"JK\");\r\n\r\n  const [labels, setLabels] = useState([]);\r\n\r\n  const [inputs, setInputs] = useState([]);\r\n\r\n  const [, updateState] = React.useState();\r\n  const forceUpdate = React.useCallback(() => updateState({}), []);\r\n\r\n  const changeFlipFlopType = () => {\r\n    if(flipflopType == \"JK\"){\r\n      setFlipflopType(\"SR\");\r\n    }\r\n    else if(flipflopType == \"SR\"){\r\n      setFlipflopType(\"D\");\r\n    }\r\n    else if(flipflopType == \"D\"){\r\n      setFlipflopType(\"T\");\r\n    }\r\n    else if(flipflopType == \"T\"){\r\n      setFlipflopType(\"JK\");\r\n    }\r\n  }\r\n\r\n  const convertToBinary = (dec) => {\r\n    dec = dec.toString(2);\r\n    \r\n    while(dec.length < bitsState + numInputs){\r\n      dec = 0 + dec;\r\n    }\r\n    return dec.toString(2).split(\"\");\r\n    \r\n  }\r\n\r\n  const displayTable = () => {\r\n    if(inputs.length === 0){\r\n      makeLabels();\r\n      setInputs(Array.from(Array(Math.pow(2,bitsState + numInputs)).keys()));\r\n    }\r\n    else {\r\n      alert(\"Reset Table before generating a table again\")\r\n    }\r\n  }\r\n  const resetTable = () => {\r\n    if(inputs.length !== 0){\r\n      setInputs([]);\r\n      setLabels([]);\r\n    }\r\n  }\r\n\r\n  const makeLabels = () => {\r\n    const alphabetArray = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".split(\"\");\r\n    var labelAppend = [];\r\n    for(let i = 0; i < bitsState; i++){\r\n      labelAppend.push(alphabetArray[i])\r\n    }\r\n\r\n    for(let i = 0; i < numInputs; i++){\r\n      labelAppend.push(\"Input\")\r\n    }\r\n\r\n    for(let i = 0; i < bitsState; i++){\r\n      labelAppend.push(alphabetArray[i])\r\n    }\r\n\r\n    if(flipflopType == \"JK\"){\r\n      for(let i = 0; i < bitsState; i++){\r\n        labelAppend.push(\"J\" + alphabetArray[i])\r\n        labelAppend.push(\"K\" + alphabetArray[i])\r\n      }\r\n    }\r\n    else if(flipflopType == \"SR\"){\r\n      for(let i = 0; i < bitsState; i++){\r\n        labelAppend.push(\"S\" + alphabetArray[i])\r\n        labelAppend.push(\"R\" + alphabetArray[i])\r\n      }\r\n    }\r\n    else if(flipflopType == \"D\"){\r\n      for(let i = 0; i < bitsState; i++){\r\n        labelAppend.push(\"D\")\r\n        labelAppend.push(alphabetArray[i])\r\n      }\r\n    }\r\n    else if(flipflopType == \"T\"){\r\n      for(let i = 0; i < bitsState; i++){\r\n        labelAppend.push(\"T\")\r\n        labelAppend.push(alphabetArray[i])\r\n      }\r\n    }\r\n    \r\n    setLabels(labelAppend);\r\n  }\r\n  \r\n  const [renderLabels, setRenderLabels] = useState(false);\r\n  if(renderLabels === false){\r\n    //makeLabels();\r\n    setRenderLabels(true);\r\n  }\r\n\r\n\r\n  return(\r\n    document.title = \"FlipFlop\",\r\n    <div className = \"main\">\r\n\r\n      <div className = \"titleParent\">\r\n        <h1>Flip flop Excitation Table Generator</h1>\r\n      </div>\r\n\r\n      <div className = \"optionsParent\">\r\n\r\n        <div className = \"option\">\r\n          <h2>Set Bits</h2>\r\n\r\n          <button onClick = {() => setbitsState(bitsState - 1)} className = \"truthTablenums\">-</button>\r\n          <h1> {bitsState} </h1>\r\n          <button onClick = {() => setbitsState(bitsState + 1)} className = \"truthTablenums\">+</button>\r\n        </div>\r\n\r\n        <div className = \"option\">\r\n          <h2>Set Inputs</h2>\r\n\r\n          <button onClick = {() => setNumInputs(numInputs - 1)} className = \"truthTablenums\">-</button>\r\n          <h1> {numInputs} </h1>\r\n          <button onClick = {() => setNumInputs(numInputs + 1)} className = \"truthTablenums\">+</button>\r\n        </div>\r\n\r\n        <div className = \"option\">\r\n          <h2 >Flip Flop Type</h2>\r\n          <button onClick = {changeFlipFlopType} className = \"generalButton\">{flipflopType}</button>\r\n        </div>\r\n        \r\n      </div>\r\n\r\n      <div className = \"generatorParent\">\r\n        <button onClick = {displayTable} className = \"generateButton\">GENERATE TABLE</button>\r\n        <button onClick = {resetTable} className = \"generateButton\">RESET TABLE</button>\r\n      </div>\r\n      \r\n      <div className = \"bodyParent\">\r\n        { \r\n          inputs.length !== 0 && <h1>Type A Table (Modify Present State)</h1>  \r\n        }\r\n        \r\n        <div className = \"row\">\r\n          {labels.map((element,index) => (\r\n            <Labels name = {element} key={index}/>\r\n          ))}\r\n        </div>\r\n        {inputs.map((element,index) => (\r\n          <TruthTableRow inputs = {convertToBinary(element)} bitsState = {bitsState} \r\n          numInputs = {numInputs} flipflopType = {flipflopType} key={index}/>\r\n        ))}\r\n\r\n        <br/>\r\n\r\n        { \r\n          inputs.length !== 0 && <h1>Type B Table (Modify Input Functions)</h1>\r\n        }\r\n        \r\n        \r\n        <div className = \"row\">\r\n          {labels.map((element,index) => (\r\n            <Labels name = {element} key={index}/>\r\n          ))}\r\n        </div>\r\n        {inputs.map((element,index) => (\r\n          <TruthTableRowTypeB inputs = {convertToBinary(element)} bitsState = {bitsState} \r\n          numInputs = {numInputs} flipflopType = {flipflopType} key={index}/>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}